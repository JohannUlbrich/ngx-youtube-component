{"version":3,"sources":["ng://ngx-youtube-component/lib/youtube.service.ts","ng://ngx-youtube-component/lib/youtube.component.ts","ng://ngx-youtube-component/lib/youtube.module.ts"],"names":["YoutubeService","zone","this","_window","window","prototype","getIframeApi","iframeApi","loadIframeApi","Promise","resolve","scriptTag","_this","document","createElement","src","body","appendChild","Injectable","args","providedIn","NgZone","YoutubeComponent","youtubeApiService","playerElement","ngOnInit","playerOptions","width","undefined","height","videoId","playerVars","events","Object","keys","forEach","eventListenerName","hasOwnProperty","eventListener","subject_1","Subject","event","next","subscriptions","push","subscribe","then","success","player","Player","nativeElement","ngOnDestroy","_a","tslib_1.__values","_b","done","value","unsubscribe","Component","selector","template","styles","ElementRef","Input","YoutubeModule","NgModule","imports","providers","declarations","exports"],"mappings":"yVAEA,iBAUE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAClBC,KAAKC,QAXeC,cAcfJ,EAAAK,UAAAC,wBAKL,OAJKJ,KAAKK,WACRL,KAAKM,gBAGAN,KAAKK,WAGNP,EAAAK,UAAAG,oCACNN,KAAKK,UAAY,IAAIE,QAAQ,SAAAC,GAC3B,IAAMC,EAAYC,EAAKT,QAAQU,SAASC,cAAc,UACtDH,EAAUI,IAAM,qCAChBH,EAAKT,QAAQU,SAASG,KAAKC,YAAYN,GAGvCC,EAAKT,QAAiC,wBAAI,WACxCO,EAAQE,EAAKT,QAAY,4BA5BhCe,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALOC,EAAAA,mJC2BnB,SAAAC,EACUC,EACAC,GADAtB,KAAAqB,kBAAAA,EACArB,KAAAsB,cAAAA,qBAJ8B,UAOxCF,EAAAjB,UAAAoB,SAAA,WAAA,IAAAb,EAAAV,KACQwB,EAAkC,GAEpCxB,KAAKyB,QAAUC,YACjBF,EAAcC,MAAQzB,KAAKyB,OAGzBzB,KAAK2B,SAAWD,YAClBF,EAAcG,OAAS3B,KAAK2B,QAG1B3B,KAAK4B,UAAYF,YACnBF,EAAcI,QAAU5B,KAAK4B,SAG3B5B,KAAK6B,aAAeH,YACtBF,EAAcK,WAAa7B,KAAK6B,YAG9B7B,KAAK8B,SAAWJ,YAClBF,EAAcM,OAAS,GAEvBC,OAAOC,KAAKhC,KAAK8B,QAAQG,QAAQ,SAAAC,GAC/B,GAAIxB,EAAKoB,OAAOK,eAAeD,GAAoB,CACjD,IAAME,EAAgB1B,EAAKoB,OAAOI,GAC5BG,EAAU,IAAIC,EAAAA,QAGpBd,EAAcM,OAAOI,GAFL,SAAAK,GAAS,OAAAF,EAAQG,KAAKD,IAGtC7B,EAAK+B,cAAcC,KAAKL,EAAQM,UAAUP,QAKhDpC,KAAKqB,kBAAkBjB,eAAewC,KAAK,SAAAC,GAMzC,OALAnC,EAAKoC,OAAS,IAAID,EAAQE,OACxBrC,EAAKY,cAAc0B,cACnBxB,GAGKd,EAAKoC,UAIhB1B,EAAAjB,UAAA8C,YAAA,eACE,IAA2B,IAAAC,EAAAC,EAAAA,SAAAnD,KAAKyC,eAAaW,EAAAF,EAAAV,QAAAY,EAAAC,KAAAD,EAAAF,EAAAV,OAAA,CAAtBY,EAAAE,MACRC,gJAlElBC,EAAAA,UAASvC,KAAA,CAAC,CACTwC,SAAU,UACVC,SAAU,GACVC,OAAQ,gDALD7D,SAJP8D,EAAAA,6CAYCC,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,cCtBHC,EAAA,oDAICC,EAAAA,SAAQ9C,KAAA,CAAC,CACR+C,QAAS,GACTC,UAAW,CAACnE,GACZoE,aAAc,CAAC9C,GACf+C,QAAS,CAAC/C,SARZ","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\nconst getWindow = () => window;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YoutubeService {\r\n  private _window: any;\r\n\r\n  private iframeApi: Promise<any>;\r\n\r\n  constructor(private zone: NgZone) {\r\n    this._window = getWindow();\r\n  }\r\n\r\n  public getIframeApi(): Promise<any> {\r\n    if (!this.iframeApi) {\r\n      this.loadIframeApi();\r\n    }\r\n\r\n    return this.iframeApi;\r\n  }\r\n\r\n  private loadIframeApi(): void {\r\n    this.iframeApi = new Promise(resolve => {\r\n      const scriptTag = this._window.document.createElement('script');\r\n      scriptTag.src = 'https://www.youtube.com/iframe_api';\r\n      this._window.document.body.appendChild(scriptTag);\r\n\r\n      // The IFrame Player API will call this function when the page has finished downloading the JavaScript for the player API\r\n      this._window['onYouTubeIframeAPIReady'] = () => {\r\n        resolve(this._window['YT']);\r\n      };\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  ElementRef\r\n} from '@angular/core';\r\n//import {} from '@types/youtube';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { YoutubeService } from './youtube.service';\r\n\r\n@Component({\r\n  selector: 'youtube',\r\n  template: '',\r\n  styles: []\r\n})\r\nexport class YoutubeComponent implements OnInit, OnDestroy {\r\n  @Input() width: number;\r\n  @Input() height: number;\r\n  @Input() videoId: string;\r\n  @Input() playerVars: YT.PlayerVars;\r\n  @Input() events: YT.Events;\r\n\r\n  private player: YT.Player;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private youtubeApiService: YoutubeService,\r\n    private playerElement: ElementRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const playerOptions: YT.PlayerOptions = {};\r\n\r\n    if (this.width !== undefined) {\r\n      playerOptions.width = this.width;\r\n    }\r\n\r\n    if (this.height !== undefined) {\r\n      playerOptions.height = this.height;\r\n    }\r\n\r\n    if (this.videoId !== undefined) {\r\n      playerOptions.videoId = this.videoId;\r\n    }\r\n\r\n    if (this.playerVars !== undefined) {\r\n      playerOptions.playerVars = this.playerVars;\r\n    }\r\n\r\n    if (this.events !== undefined) {\r\n      playerOptions.events = {};\r\n\r\n      Object.keys(this.events).forEach(eventListenerName => {\r\n        if (this.events.hasOwnProperty(eventListenerName)) {\r\n          const eventListener = this.events[eventListenerName];\r\n          const subject = new Subject<any>();\r\n          const handler = event => subject.next(event);\r\n\r\n          playerOptions.events[eventListenerName] = handler;\r\n          this.subscriptions.push(subject.subscribe(eventListener));\r\n        }\r\n      });\r\n    }\r\n\r\n    this.youtubeApiService.getIframeApi().then(success => {\r\n      this.player = new success.Player(\r\n        this.playerElement.nativeElement,\r\n        playerOptions\r\n      );\r\n\r\n      return this.player;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    for (const subscription of this.subscriptions) {\r\n      subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { YoutubeService } from './youtube.service';\r\nimport { YoutubeComponent } from './youtube.component';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  providers: [YoutubeService],\r\n  declarations: [YoutubeComponent],\r\n  exports: [YoutubeComponent]\r\n})\r\nexport class YoutubeModule {}\r\n"]}