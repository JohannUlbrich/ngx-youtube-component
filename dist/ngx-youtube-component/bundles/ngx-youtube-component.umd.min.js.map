{"version":3,"sources":["ng://ngx-youtube-component/lib/youtube.service.ts","ng://ngx-youtube-component/lib/youtube.component.ts","ng://ngx-youtube-component/lib/youtube.module.ts"],"names":["YoutubeService","zone","this","_window","window","prototype","getIframeApi","iframeApi","loadIframeApi","Promise","resolve","scriptTag","_this","document","createElement","src","body","appendChild","Injectable","args","providedIn","NgZone","YoutubeComponent","youtubeApiService","playerElement","ngOnInit","playerOptions","width","undefined","height","videoId","playerVars","events","Object","keys","forEach","eventListenerName","hasOwnProperty","eventListener","subject_1","Subject","event","next","subscriptions","push","subscribe","then","success","player","Player","nativeElement","ngOnDestroy","_a","tslib_1.__values","_b","done","value","unsubscribe","Component","selector","template","styles","ElementRef","Input","YoutubeModule","NgModule","imports","providers","declarations","exports"],"mappings":"yVAEA,iBAUE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAClBC,KAAKC,QAXeC,cAcfJ,EAAAK,UAAAC,wBAKL,OAJKJ,KAAKK,WACRL,KAAKM,gBAGAN,KAAKK,WAGNP,EAAAK,UAAAG,oCACNN,KAAKK,UAAY,IAAIE,QAAQ,SAAAC,GAC3B,IAAMC,EAAYC,EAAKT,QAAQU,SAASC,cAAc,UACtDH,EAAUI,IAAM,qCAChBH,EAAKT,QAAQU,SAASG,KAAKC,YAAYN,GAGvCC,EAAKT,QAAiC,wBAAI,WACxCO,EAAQE,EAAKT,QAAY,4BA5BhCe,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALOC,EAAAA,mJC2BnB,SAAAC,EACUC,EACAC,GADAtB,KAAAqB,kBAAAA,EACArB,KAAAsB,cAAAA,qBAJ8B,UAOxCF,EAAAjB,UAAAoB,SAAA,WAAA,IAAAb,EAAAV,KACQwB,EAAkC,GAEpCxB,KAAKyB,QAAUC,YACjBF,EAAcC,MAAQzB,KAAKyB,OAGzBzB,KAAK2B,SAAWD,YAClBF,EAAcG,OAAS3B,KAAK2B,QAG1B3B,KAAK4B,UAAYF,YACnBF,EAAcI,QAAU5B,KAAK4B,SAG3B5B,KAAK6B,aAAeH,YACtBF,EAAcK,WAAa7B,KAAK6B,YAG9B7B,KAAK8B,SAAWJ,YAClBF,EAAcM,OAAS,GAEvBC,OAAOC,KAAKhC,KAAK8B,QAAQG,QAAQ,SAAAC,GAC/B,GAAIxB,EAAKoB,OAAOK,eAAeD,GAAoB,CACjD,IAAME,EAAgB1B,EAAKoB,OAAOI,GAC5BG,EAAU,IAAIC,EAAAA,QAGpBd,EAAcM,OAAOI,GAFL,SAAAK,GAAS,OAAAF,EAAQG,KAAKD,IAGtC7B,EAAK+B,cAAcC,KAAKL,EAAQM,UAAUP,QAKhDpC,KAAKqB,kBAAkBjB,eAAewC,KAAK,SAAAC,GAMzC,OALAnC,EAAKoC,OAAS,IAAID,EAAQE,OACxBrC,EAAKY,cAAc0B,cACnBxB,GAGKd,EAAKoC,UAIhB1B,EAAAjB,UAAA8C,YAAA,eACE,IAA2B,IAAAC,EAAAC,EAAAA,SAAAnD,KAAKyC,eAAaW,EAAAF,EAAAV,QAAAY,EAAAC,KAAAD,EAAAF,EAAAV,OAAA,CAAtBY,EAAAE,MACRC,gJAlElBC,EAAAA,UAASvC,KAAA,CAAC,CACTwC,SAAU,UACVC,SAAU,GACVC,OAAQ,gDALD7D,SAJP8D,EAAAA,6CAYCC,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,cCtBHC,EAAA,oDAICC,EAAAA,SAAQ9C,KAAA,CAAC,CACR+C,QAAS,GACTC,UAAW,CAACnE,GACZoE,aAAc,CAAC9C,GACf+C,QAAS,CAAC/C,SARZ","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\n\nconst getWindow = () => window;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class YoutubeService {\n  private _window: any;\n\n  private iframeApi: Promise<any>;\n\n  constructor(private zone: NgZone) {\n    this._window = getWindow();\n  }\n\n  public getIframeApi(): Promise<any> {\n    if (!this.iframeApi) {\n      this.loadIframeApi();\n    }\n\n    return this.iframeApi;\n  }\n\n  private loadIframeApi(): void {\n    this.iframeApi = new Promise(resolve => {\n      const scriptTag = this._window.document.createElement('script');\n      scriptTag.src = 'https://www.youtube.com/iframe_api';\n      this._window.document.body.appendChild(scriptTag);\n\n      // The IFrame Player API will call this function when the page has finished downloading the JavaScript for the player API\n      this._window['onYouTubeIframeAPIReady'] = () => {\n        resolve(this._window['YT']);\n      };\n    });\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef\n} from '@angular/core';\n//import {} from '@types/youtube';\nimport { Subject, Subscription } from 'rxjs';\nimport { YoutubeService } from './youtube.service';\n\n@Component({\n  selector: 'youtube',\n  template: '',\n  styles: []\n})\nexport class YoutubeComponent implements OnInit, OnDestroy {\n  @Input() width: number;\n  @Input() height: number;\n  @Input() videoId: string;\n  @Input() playerVars: YT.PlayerVars;\n  @Input() events: YT.Events;\n\n  private player: YT.Player;\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private youtubeApiService: YoutubeService,\n    private playerElement: ElementRef\n  ) {}\n\n  ngOnInit() {\n    const playerOptions: YT.PlayerOptions = {};\n\n    if (this.width !== undefined) {\n      playerOptions.width = this.width;\n    }\n\n    if (this.height !== undefined) {\n      playerOptions.height = this.height;\n    }\n\n    if (this.videoId !== undefined) {\n      playerOptions.videoId = this.videoId;\n    }\n\n    if (this.playerVars !== undefined) {\n      playerOptions.playerVars = this.playerVars;\n    }\n\n    if (this.events !== undefined) {\n      playerOptions.events = {};\n\n      Object.keys(this.events).forEach(eventListenerName => {\n        if (this.events.hasOwnProperty(eventListenerName)) {\n          const eventListener = this.events[eventListenerName];\n          const subject = new Subject<any>();\n          const handler = event => subject.next(event);\n\n          playerOptions.events[eventListenerName] = handler;\n          this.subscriptions.push(subject.subscribe(eventListener));\n        }\n      });\n    }\n\n    this.youtubeApiService.getIframeApi().then(success => {\n      this.player = new success.Player(\n        this.playerElement.nativeElement,\n        playerOptions\n      );\n\n      return this.player;\n    });\n  }\n\n  ngOnDestroy() {\n    for (const subscription of this.subscriptions) {\n      subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { YoutubeService } from './youtube.service';\nimport { YoutubeComponent } from './youtube.component';\n\n@NgModule({\n  imports: [],\n  providers: [YoutubeService],\n  declarations: [YoutubeComponent],\n  exports: [YoutubeComponent]\n})\nexport class YoutubeModule {}\n"]}